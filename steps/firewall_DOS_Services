this is for setting up the firewall and configuring iptables to reject any sign of a DOS attack
we will also go over dissabling services we will not be using. 

1) https://en.m.wikibooks.org/wiki/Communication_Networks/HTTP_Protocol

2) https://www.linux.com/tutorials/introduction-uncomplicated-firewall-ufw/

3) https://javapipe.com/blog/iptables-ddos-protection/


*1
http port = 80 | standard tcp
https port = 443 | standard TLS/SSL (not tcp?)

ssh port = 690 | set by us. tcp

inside the vm:

    ubuntu has ufw already installed.

    check the status of ufw with 
        sudo ufw status
most of the time ufw is disabled on inital start for configuration purposes
configure for the above ports/

sudo ufw allow 690/tcp

*1 if you do the optional part for web: 

    sudo ufw allow 80/tcp
    sudo ufw allow 430

but i didnt worry about that as i gotta turn this in.

note:
 or as seen at *2 sudo ufw allow ssh/tcp | should be wrong as its not the allowed port we specifed.



This is for the DOS protection, i will be using iptables and have seen otherwise, but this will provide more than enough support and structure

4) https://www.thegeekstuff.com/2011/06/iptables-rules-examples/



Delete Existing Rules:
or bad rules if you make a mistake.

sudo iptables -F
(or)
sudo iptables --flush

Set Default Chain Policies:

iptables -P INPUT DROP
iptables -P FORWARD DROP

Allow Incoming SSH only from a Specific Network:
allows us to connect from any 192.168.99.X port: which we use.

    iptables -A INPUT -i enp0s8 -p tcp -s 192.168.99.0/24 --dport 690 -m state --state NEW,ESTABLISHED -j ACCEPT

Allow Incoming HTTP and HTTPS if we want that: we do for updates and stuff...

    iptables -A INPUT -i enp0s8 -p tcp --dport 80 -m state --state NEW,ESTABLISHED -j ACCEPT
    iptables -A INPUT -i enp0s8 -p tcp --dport 443 -m state --state NEW,ESTABLISHED -j ACCEPT
OR

combine all of it:
    iptables -A INPUT -i enp0s8 -p tcp -m multiport --dports 690,80,443 -m state --state NEW,ESTABLISHED -j ACCEPT


Prevent DoS Attack:
    iptables -A INPUT -p tcp --dport 80 -m limit --limit 10/minute --limit-burst 50 -j ACCEPT

### SSH brute-force protection ### 
    sudo iptables -A INPUT -p tcp --dport ssh -m conntrack --ctstate NEW -m recent --set
    sudo iptables -A INPUT -p tcp --dport ssh -m conntrack --ctstate NEW -m recent --update --seconds 60 --hitcount 10 -j DROP  

### Protection against port scanning ### 
   sudo iptables -N port-scanning 
    sudo iptables -A port-scanning -p tcp --tcp-flags SYN,ACK,FIN,RST RST -m limit --limit 1/s --limit-burst 2 -j RETURN 
    sudo iptables -A port-scanning -j DROP 

restart with

    sudo shutdown -r now

try to scan the ports from host!

    nmap 192.168.99.101
    should display good results :)

add -Pn to show off how secure it is! it will take a moment.



Turn Them Services Off!

in machine, via ssh or direct. 

    disable App-Armor as we dont take advantage of it in this project.

    sudo systemctl stop apparmor
    sudo systemctl disable apparmor

    sudo systemctl stop apport
    sudo systemctl disable apport

    sudo systemctl stop atd
    sudo systemctl disable atd

    sudo systemctl stop ebtables
    sudo systemctl disable ebtables

    sudo systemctl stop lxcfs
    sudo systemctl disable lxcfs

Done!






########################         NOTES         ########################
i did not use this:

to extra pro-tec 
*untested, might break some things. maybe.*
*3

SUDO IT ALL!!!!
### 1: Drop invalid packets ### 
sudo /sbin/iptables -t mangle -A PREROUTING -m conntrack --ctstate INVALID -j DROP  

### 2: Drop TCP packets that are new and are not SYN ### 
sudo /sbin/iptables -t mangle -A PREROUTING -p tcp ! --syn -m conntrack --ctstate NEW -j DROP 
 
### 3: Drop SYN packets with suspicious MSS value ### 
sudo /sbin/iptables -t mangle -A PREROUTING -p tcp -m conntrack --ctstate NEW -m tcpmss ! --mss 536:65535 -j DROP

### 4: Block packets with bogus TCP flags ### 
sudo /sbin/iptables -t mangle -A PREROUTING -p tcp --tcp-flags FIN,SYN,RST,PSH,ACK,URG NONE -j DROP 
sudo /sbin/iptables -t mangle -A PREROUTING -p tcp --tcp-flags FIN,SYN FIN,SYN -j DROP 
sudo /sbin/iptables -t mangle -A PREROUTING -p tcp --tcp-flags SYN,RST SYN,RST -j DROP 
sudo /sbin/iptables -t mangle -A PREROUTING -p tcp --tcp-flags FIN,RST FIN,RST -j DROP 
sudo /sbin/iptables -t mangle -A PREROUTING -p tcp --tcp-flags FIN,ACK FIN -j DROP 
sudo /sbin/iptables -t mangle -A PREROUTING -p tcp --tcp-flags ACK,URG URG -j DROP 
sudo /sbin/iptables -t mangle -A PREROUTING -p tcp --tcp-flags ACK,FIN FIN -j DROP 
sudo /sbin/iptables -t mangle -A PREROUTING -p tcp --tcp-flags ACK,PSH PSH -j DROP 
sudo /sbin/iptables -t mangle -A PREROUTING -p tcp --tcp-flags ALL ALL -j DROP 
sudo /sbin/iptables -t mangle -A PREROUTING -p tcp --tcp-flags ALL NONE -j DROP 
sudo /sbin/iptables -t mangle -A PREROUTING -p tcp --tcp-flags ALL FIN,PSH,URG -j DROP 
sudo /sbin/iptables -t mangle -A PREROUTING -p tcp --tcp-flags ALL SYN,FIN,PSH,URG -j DROP 
sudo /sbin/iptables -t mangle -A PREROUTING -p tcp --tcp-flags ALL SYN,RST,ACK,FIN,URG -j DROP  

### 5: Block spoofed packets ### 
sudo /sbin/iptables -t mangle -A PREROUTING -s 224.0.0.0/3 -j DROP 
sudo /sbin/iptables -t mangle -A PREROUTING -s 169.254.0.0/16 -j DROP 
sudo /sbin/iptables -t mangle -A PREROUTING -s 172.16.0.0/12 -j DROP 
sudo /sbin/iptables -t mangle -A PREROUTING -s 192.0.2.0/24 -j DROP 


sudo /sbin/iptables -t mangle -A PREROUTING -s 10.0.0.0/8 -j DROP 
sudo /sbin/iptables -t mangle -A PREROUTING -s 0.0.0.0/8 -j DROP 
sudo /sbin/iptables -t mangle -A PREROUTING -s 240.0.0.0/5 -j DROP 
sudo /sbin/iptables -t mangle -A PREROUTING -s 127.0.0.0/8 ! -i lo -j DROP
NOT THIS: `sudo /sbin/iptables -t mangle -A PREROUTING -s 192.168.0.0/16 -j DROP` :THIS NOT

### 6: Drop ICMP (you usually don't need this protocol) ### 
sudo /sbin/iptables -t mangle -A PREROUTING -p icmp -j DROP  

### 7: Drop fragments in all chains ### 
sudo /sbin/iptables -t mangle -A PREROUTING -f -j DROP  

### 8: Limit connections per source IP ### 
sudo /sbin/iptables -A INPUT -p tcp -m connlimit --connlimit-above 111 -j REJECT --reject-with tcp-reset  

### 9: Limit RST packets ### 
sudo /sbin/iptables -A INPUT -p tcp --tcp-flags RST RST -m limit --limit 2/s --limit-burst 2 -j ACCEPT 
sudo /sbin/iptables -A INPUT -p tcp --tcp-flags RST RST -j DROP  

### 10: Limit new TCP connections per second per source IP ### 
sudo /sbin/iptables -A INPUT -p tcp -m conntrack --ctstate NEW -m limit --limit 60/s --limit-burst 20 -j ACCEPT 
sudo /sbin/iptables -A INPUT -p tcp -m conntrack --ctstate NEW -j DROP  



******
note from source 3: Mitigating SYN Floods With SYNPROXY

It’s important to note that the performance of the rules will always be better if we find a certain pattern or signature to block,
 such as packet length (-m length), TOS (-m tos), TTL (-m ttl) or strings and hex values (-m string and -m u32 for the more advanced users).

### 11: Use SYNPROXY on all ports (disables connection limiting rule) ### 
sudo /sbin/iptables -t raw -A PREROUTING -p tcp -m tcp --syn -j CT --notrack –dport 80 –dport 690
sudo /sbin/iptables -A INPUT -p tcp -m tcp -m conntrack --ctstate INVALID,UNTRACKED -j SYNPROXY --sack-perm --timestamp --wscale 7 --mss 1460 –dport 80 –dport 690
sudo /sbin/iptables -A INPUT -m conntrack --ctstate INVALID -j DROP –dport 80 –dport 690